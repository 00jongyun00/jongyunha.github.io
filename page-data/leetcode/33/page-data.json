{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/leetcode/33/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog","siteUrl":"https://gatsby-starter-lavender.vercel.app","thumbnail":"/thumbnails/jongyun.png"}},"markdownRemark":{"id":"f483b495-80f4-5040-8e80-090e77fae49e","tableOfContents":"<ul>\n<li><a href=\"#approach\">Approach</a></li>\n</ul>","excerpt":"There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown…","html":"<p>There is an integer array nums sorted in ascending order (with distinct values).</p>\n<p>Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 &#x3C;= k &#x3C; nums.length) such that the resulting array is [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].</p>\n<p>Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4</code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1</code></pre></div>\n<p>Example 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [1], target = 0\nOutput: -1</code></pre></div>\n<br/>\n<h2 id=\"approach\" style=\"position:relative;\">Approach<a href=\"#approach\" aria-label=\"approach permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>해당 배열에서 정렬이 꺾이는 구간이 1곳인 것을 주의 깊게 살펴보자.</p>\n<ul>\n<li>start, end, mid 를 정의 한다.</li>\n<li>nums[start] 가 nums[mid] 보다 작으면 start ~ mid 까진 정렬 되어 있다고 가정한다.</li>\n<li>target 이 nums[start] 보다 크거나 같고 nums[mid] 작거나 같으면 start, mid - 1 로 재귀 호출한다.</li>\n<li>target 이 nums[mid] 보다 크거나 같고 nums[end] 보다 작거나 같으면 mid + 1, end 로 재귀 호출 한다.</li>\n<li>그게 아닌 경우에는 모두 mid + 1, end 로 호출 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">val</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> mid\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/leetcode/33/"},"frontmatter":{"title":"Leetcode 33. Search in Rotated Sorted Array","date":"2022-12-04","description":"Advanced binary search","tags":["Leetcode","Kotlin","Algorithm"],"thumbnail":""}},"previous":{"fields":{"slug":"/leetcode/32/"},"frontmatter":{"title":"Leetcode 32. Longest Valid Parentheses"}},"next":{"fields":{"slug":"/leetcode/34/"},"frontmatter":{"title":"Leetcode 33. Find First and Last Position of Element in Sorted Array"}}},"pageContext":{"id":"f483b495-80f4-5040-8e80-090e77fae49e","previousPostId":"c67518dd-9b9d-5c21-9bfb-f045775ccaf5","nextPostId":"97693b83-9763-5ef4-aad6-b762e93c9a41"}},"staticQueryHashes":["2260143708","658623446","984448874"]}