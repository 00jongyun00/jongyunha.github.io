{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/leetcode/","result":{"data":{"site":{"siteMetadata":{"title":"Jongyun Blog","siteUrl":"https://gatsby-starter-lavender.vercel.app","thumbnail":"/thumbnails/jongyun.png"}},"markdownRemark":{"id":"d29a2912-b666-5870-a922-88413e8e2606","tableOfContents":"<ul>\n<li>\n<p><a href=\"#approach\">Approach</a></p>\n<ul>\n<li><a href=\"#time-complexity\">Time Complexity</a></li>\n<li><a href=\"#space-complexity\">Space Complexity</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#code\">Code</a></p>\n</li>\n</ul>","excerpt":"Given a string containing just the characters ’(’ and ’)’, return the length of the longest valid (well-formed)\nparentheses substring. Example 1: Example…","html":"<p>Given a string containing just the characters ’(’ and ’)’, return the length of the longest valid (well-formed)\nparentheses substring.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Input: s <span class=\"token operator\">=</span> <span class=\"token string\">\"(()\"</span>\nOutput: <span class=\"token number\">2</span>\nExplanation: The longest valid parentheses substring is <span class=\"token string\">\"()\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Input: s <span class=\"token operator\">=</span> <span class=\"token string\">\")()())\"</span>\nOutput: <span class=\"token number\">4</span>\nExplanation: The longest valid parentheses substring is <span class=\"token string\">\"()()\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Example 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Input: s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nOutput: <span class=\"token number\">0</span></code></pre></div>\n<p>Constraints:</p>\n<ul>\n<li>0 &#x3C;= s.length &#x3C;= 3 * 104</li>\n<li>s[i] is ’(’, or ’)‘.</li>\n</ul>\n<h2 id=\"approach\" style=\"position:relative;\">Approach<a href=\"#approach\" aria-label=\"approach permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>Loop through the string from left to right and store the counts of both type of parentheses in two variables left and\nright</li>\n<li>If left == right, it means we have valid substring.</li>\n<li>We can then find if the length of current valid substring (left + right) is the maximum or not.</li>\n<li>If right > left, it means we have invalid strings, and we will reset left and right to zero.</li>\n<li>Repeat the steps 1-4 looping string from right to left and reset counters as soon as left > right.</li>\n</ol>\n<h3 id=\"time-complexity\" style=\"position:relative;\">Time Complexity<a href=\"#time-complexity\" aria-label=\"time complexity permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Since we are looping the string twice, the time complexity will be O(n).</p>\n<h3 id=\"space-complexity\" style=\"position:relative;\">Space Complexity<a href=\"#space-complexity\" aria-label=\"space complexity permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>We are not using any data structures to store intermediate computations, hence the space complexity will be O(1).</p>\n<h2 id=\"code\" style=\"position:relative;\">Code<a href=\"#code\" aria-label=\"code permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">longestValidParentheses</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> left<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> right<span class=\"token operator\">++</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> count <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> downTo <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> left<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> right<span class=\"token operator\">++</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> count <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> count\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/leetcode/"},"frontmatter":{"title":"Leetcode 32. Longest Valid Parentheses","date":"2022-12-03","description":"","tags":["Leetcode","Kotlin","Algorithm"],"thumbnail":""}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null},"pageContext":{"id":"d29a2912-b666-5870-a922-88413e8e2606","previousPostId":"aece308a-50b1-5084-aafb-fb427c99c47a","nextPostId":null}},"staticQueryHashes":["2260143708","658623446","984448874"]}