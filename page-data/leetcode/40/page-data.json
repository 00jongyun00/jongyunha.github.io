{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/leetcode/40/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog","siteUrl":"https://gatsby-starter-lavender.vercel.app","thumbnail":"/thumbnails/jongyun.png"}},"markdownRemark":{"id":"ef1766a3-d2ad-528f-b495-29a763862820","tableOfContents":"<ul>\n<li><a href=\"#approach\">Approach</a></li>\n</ul>","excerpt":"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to…","html":"<p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.</p>\n<p>Each number in candidates may only be used once in the combination.</p>\n<p>Note: The solution set must not contain duplicate combinations.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]</code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]</code></pre></div>\n<h2 id=\"approach\" style=\"position:relative;\">Approach<a href=\"#approach\" aria-label=\"approach permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>해당 문제는 Leetcode 39 Combination sum 의 변형 문제입니다.\n각 elements 를 한번만 사용하여 unique 한 combination(순열) 을 뽑아내는 문제입니다.\n해당 문제는 각 elements 를 counting 하는 방법으로 접근하여 해결하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">combinationSum2</span><span class=\"token punctuation\">(</span>candidates<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> map <span class=\"token operator\">=</span> mutableMapOf<span class=\"token operator\">&lt;</span>Int<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> candidates<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        map<span class=\"token punctuation\">[</span>candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">val</span> candPairs <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>Pair<span class=\"token operator\">&lt;</span>Int<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>\n        target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        start<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n        list<span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> start until candPairs<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> candPairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span>\n            candPairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> cand<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            candPairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<ul>\n<li>candPair 는 각 elements 에 대해 Pair type 으로 counting 한 변수입니다.</li>\n<li>target 은 recusive 를 종료하기 위한 조건 입니다.</li>\n<li>start 는 각 recusive stack frame 에서 candPairs 를 어떤 index 부터 시작할지 위한 parameter 입니다.</li>\n<li>마지막으로 kotlin 의 parameter 는 모두 참조 이기 때문에 result.add 에서 toList() 로 copy 해서 넣어줍니다.</li>\n</ul>","fields":{"slug":"/leetcode/40/"},"frontmatter":{"title":"Leetcode 40. Combination Sum II","date":"2022-12-16","description":"Advanced Combination solution","tags":["Leetcode","Kotlin","Algorithm"],"thumbnail":""}},"previous":{"fields":{"slug":"/leetcode/34/"},"frontmatter":{"title":"Leetcode 34. Find First and Last Position of Element in Sorted Array"}},"next":null},"pageContext":{"id":"ef1766a3-d2ad-528f-b495-29a763862820","previousPostId":"97693b83-9763-5ef4-aad6-b762e93c9a41","nextPostId":null}},"staticQueryHashes":["2260143708","658623446","984448874"]}