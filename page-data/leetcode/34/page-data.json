{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/leetcode/34/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog","siteUrl":"https://gatsby-starter-lavender.vercel.app","thumbnail":"/thumbnails/jongyun.png"}},"markdownRemark":{"id":"97693b83-9763-5ef4-aad6-b762e93c9a41","tableOfContents":"<ul>\n<li><a href=\"#approach\">Approach</a></li>\n<li><a href=\"#code\">Code</a></li>\n</ul>","excerpt":"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target\nvalue. If target is not found in the…","html":"<p>Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target\nvalue.</p>\n<p>If target is not found in the array, return [-1, -1].</p>\n<p>You must write an algorithm with O(log n) runtime complexity.</p>\n<p>Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]</code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]</code></pre></div>\n<p>Example 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: nums = [], target = 0\nOutput: [-1,-1]</code></pre></div>\n<h2 id=\"approach\" style=\"position:relative;\">Approach<a href=\"#approach\" aria-label=\"approach permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>해당 문제는 time complexity O(log n) 에 풀어야 하는 문제 이기 때문에 전형 적인 binary search 문제 입니다.\n문제에 대한 접근은 다음과 같았습니다.\n<br/></p>\n<ul>\n<li>첫번째 발견에 대해서는 left side 로 binary search 를 이어 나간다.</li>\n<li>마지막 발견에 대해서는 right side 로 binary search 를 이어 나간다.</li>\n</ul>\n<h2 id=\"code\" style=\"position:relative;\">Code<a href=\"#code\" aria-label=\"code permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">searchRange</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntArray <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">intArrayOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">findFirstOccurrence</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">findLastOccurrence</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">findFirstOccurrence</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">var</span> firstOccurrence <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                firstOccurrence <span class=\"token operator\">=</span> middle\n                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n\n            target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> firstOccurrence\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">findLastOccurrence</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">var</span> lastOccurrence <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> middle <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                lastOccurrence <span class=\"token operator\">=</span> middle\n                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n\n            target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                right <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                left <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> lastOccurrence\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/leetcode/34/"},"frontmatter":{"title":"Leetcode 34. Find First and Last Position of Element in Sorted Array","date":"2022-12-05","description":"binary search","tags":["Leetcode","Kotlin","Algorithm"],"thumbnail":""}},"previous":{"fields":{"slug":"/leetcode/33/"},"frontmatter":{"title":"Leetcode 33. Search in Rotated Sorted Array"}},"next":{"fields":{"slug":"/leetcode/40/"},"frontmatter":{"title":"Leetcode 40. Combination Sum II"}}},"pageContext":{"id":"97693b83-9763-5ef4-aad6-b762e93c9a41","previousPostId":"f483b495-80f4-5040-8e80-090e77fae49e","nextPostId":"ef1766a3-d2ad-528f-b495-29a763862820"}},"staticQueryHashes":["2260143708","658623446","984448874"]}