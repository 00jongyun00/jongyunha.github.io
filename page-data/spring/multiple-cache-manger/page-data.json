{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/spring/multiple-cache-manger/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog","siteUrl":"https://gatsby-starter-lavender.vercel.app","thumbnail":"/thumbnails/jongyun.png"}},"markdownRemark":{"id":"25a19318-0b18-593e-8828-618ae80f7cda","tableOfContents":"<ul>\n<li><a href=\"#approach\">Approach</a></li>\n<li><a href=\"#bean-%EA%B5%AC%EC%84%B1\">Bean 구성</a></li>\n<li><a href=\"#cacheable-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">@Cacheable 적용하기</a></li>\n<li><a href=\"#%EC%A7%81%EC%A0%91-cachemanger-%EB%A5%BC-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\">직접 CacheManger 를 지정하기</a></li>\n</ul>","excerpt":"Approach Spring boot 에서 각기 다른 host 를 가진 Redis 에 캐싱을 해야 한다던지\nLocal cahce 와 Redis cache 를 각각 handling 해야 할때 사용 하면 좋을 것 같아 글로 적어 보려 합니다. Redis 와 local cache…","html":"<h2 id=\"approach\" style=\"position:relative;\">Approach<a href=\"#approach\" aria-label=\"approach permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Spring boot 에서 각기 다른 host 를 가진 Redis 에 캐싱을 해야 한다던지\nLocal cahce 와 Redis cache 를 각각 handling 해야 할때 사용 하면 좋을 것 같아 글로 적어 보려 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\"><span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-data-redis\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-web\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"com.fasterxml.jackson.module:jackson-module-kotlin\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.jetbrains.kotlin:kotlin-reflect\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"com.github.ben-manes.caffeine:caffeine:3.1.2\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-test\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Redis 와 local cache 에는 Concurent hash map 보다 Read/Write 에서 성능이 좋은 Caffeine cache 를 사용할 예정입니다.</p>\n<h2 id=\"bean-구성\" style=\"position:relative;\">Bean 구성<a href=\"#bean-%EA%B5%AC%EC%84%B1\" aria-label=\"bean 구성 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">CacheMangerConfiguration</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\${redis.host}\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> redisHost<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\${redis.port}\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> redisPort<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">CachingConfigurerSupport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"cacheManager\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation builtin\">@Primary</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CacheManager <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> builder <span class=\"token operator\">=</span> RedisCacheManager<span class=\"token punctuation\">.</span>RedisCacheManagerBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">fromConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">redisConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> configuration <span class=\"token operator\">=</span> RedisCacheConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span>RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair<span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"caffeineCacheManager\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">caffeineCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CacheManager <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> cacheManager <span class=\"token operator\">=</span> <span class=\"token function\">CaffeineCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"customers\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"orders\"</span></span><span class=\"token punctuation\">)</span>\n        cacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCaffeine</span><span class=\"token punctuation\">(</span>\n            Caffeine<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">initialCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">maximumSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">weakKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">recordStats</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> cacheManager\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">redisConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RedisConnectionFactory <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> configuration <span class=\"token operator\">=</span> <span class=\"token function\">RedisStandaloneConfiguration</span><span class=\"token punctuation\">(</span>redisHost<span class=\"token punctuation\">,</span> redisPort<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> <span class=\"token function\">LettuceConnectionFactory</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>@Primary annotation 으로 Redis cacheManger 를 Default 로 가져갑니다 CaffeineCacheManger 가 필요한곳에서는 cacheManger = 를 사용하여 선언합니다.</p>\n<h2 id=\"cacheable-적용하기\" style=\"position:relative;\">@Cacheable 적용하기<a href=\"#cacheable-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"cacheable 적용하기 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> HelloController <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello\"</span></span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"#name\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/hello\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"order\"</span></span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"#id\"</span></span><span class=\"token punctuation\">,</span> cacheNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"order\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cacheManger <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"caffeineCacheManager\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/orders\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"id\"</span></span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Order completed id: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">id</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Order completed id: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">id</span></span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>hello method 와 order method 를 선언 했습니다\nhello method 는 cacheManger 를 선언하지 않아 Primary CacheManger (Redis) 로 cache 가 되고\norder method 는 caffeineCacheManger 를 사용하여 local cache 가 됩니다.</p>\n<p>key 가 같을 경우 cache 된 값을 return 하게 되어 println 가 찍히지 않습니다.</p>\n<h2 id=\"직접-cachemanger-를-지정하기\" style=\"position:relative;\">직접 CacheManger 를 지정하기<a href=\"#%EC%A7%81%EC%A0%91-cachemanger-%EB%A5%BC-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"직접 cachemanger 를 지정하기 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MultipleCacheResolver</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> cacheManger<span class=\"token operator\">:</span> CacheManager<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> caffeineCacheManager<span class=\"token operator\">:</span> CacheManager\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> CacheResolver <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">resolveCaches</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> CacheOperationInvocationContext<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Cache<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> caches <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Cache<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"order\"</span></span> <span class=\"token operator\">==</span> context<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            caches<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>caffeineCacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">getCache</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"customers\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            caches<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cacheManger<span class=\"token punctuation\">.</span><span class=\"token function\">getCache</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"cacheManager\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">filterNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Configuration</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">CacheMangerConfiguration</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation builtin\">@Bean</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">cacheResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CacheResolver <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">MultipleCacheResolver</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">caffeineCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>method 별로 필요한 cache manger 를 handling 할 수도 있습니다.</p>","fields":{"slug":"/spring/multiple-cache-manger/"},"frontmatter":{"title":"Spring boot 에서 Multi cache manger 사용하기","date":"2023-01-13","description":"Redis, Caffeine cache Manger","tags":["Spring boot","Redis","cache","caffeine"],"thumbnail":""}},"previous":{"fields":{"slug":"/leetcode/746/"},"frontmatter":{"title":"Leetcode 746. Min Cost Climbing Stairs"}},"next":{"fields":{"slug":"/daily/2023-01-15/"},"frontmatter":{"title":"Goodbye 2022"}}},"pageContext":{"id":"25a19318-0b18-593e-8828-618ae80f7cda","previousPostId":"ea6cc833-11fe-50fb-a172-647a9c37e515","nextPostId":"e0838449-8703-59f4-8b65-866801c9518c"}},"staticQueryHashes":["2260143708","658623446","984448874"]}